{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}


[project]
name = "{{ cookiecutter.project_slug }}"
authors = [
    {name="{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email="{{ cookiecutter.email }}"}
]
{%- if cookiecutter.version_manager not in ["versioneer", "setuptools_scm"] %}
version = "{{ cookiecutter.version }}"
{%- endif %}

{%- if cookiecutter.open_source_license in license_classifiers %}
license = {text = "{{ cookiecutter.open_source_license }}"}
{%- endif %}

dynamic = [
{%- if cookiecutter.version_manager in ["versioneer", "setuptools_scm"] %}
    "version",
{%- endif %}
    "readme"
]
description = "{{ cookiecutter.project_short_description }}"

classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    {%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
    {%- endif %}

]

dependencies = [
    "",
]
requires-python = ">=3.10"

[project.optional-dependencies]
dev = [
    {%- if cookiecutter.use_pytest == 'y' %}
    "pytest",
    {%- endif %}
    "ruff",
]

{%- if 'no' not in cookiecutter.command_line_interface|lower %}
[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug }}.cli:main"
{%- endif %}

[build-system]
requires = [
    {%- if cookiecutter.package_manager == "poetry" %}
    "poetry-core",
    {% else %}
    "setuptools>=42",
    "wheel",
    {%- endif %}
    {%- if cookiecutter.version_manager == "versioneer" %}
    "versioneer[toml]",
    {%- endif %}
    {%- if cookiecutter.version_manager == "setuptools_scm" %}
    "setuptools_scm[toml]>=6.2",
    {%- endif %}
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
readme = {file = ["README.rst"]}

[tool.setuptools.package-data]
{{ cookiecutter.project_slug }} = [
    "py.typed"
]

[tool.mypy]
files = "$MYPY_CONFIG_FILE_DIR/src/sweet_logs, $MYPY_CONFIG_FILE_DIR/tests"
warn_return_any = true
warn_unreachable = true
strict = true
ignore_missing_imports = true
no_implicit_reexport = true
exclude = '''(?x)(
    ^docs/.*$  # Exclude documentation
)'''


[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

{% if cookiecutter.version_manager == "versioneer" %}
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/{{ cookiecutter.project_slug }}/_version.py"
versionfile_build = "{{ cookiecutter.project_slug }}/_version.py"
tag_prefix = "v"
parentdir_prefix = "{{ cookiecutter.project_slug }}-"
{% elif cookiecutter.version_manager == "autopub" -%}
[tool.autopub]
git-username = {{ cookiecutter.github_username }}
git-email = {{ cookiecutter.email }}
{% elif cookiecutter.version_manager == "setuptools_scm" -%}
[tool.setuptools_scm]
write_to = "src/{{ cookiecutter.project_slug }}/_version.py"
{%- endif %}


{%- if cookiecutter.use_pytest %}
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [
    "tests",
]
{%- endif %}
